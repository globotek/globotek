<?php

/**
 * Created by PhpStorm.
 * User: matthew
 * Date: 29/11/18
 * Time: 4:50 PM
 */
class Chumly_User_List_Table extends Chumly_List_Table {
	
	public function __construct( $args = array() ) {
		parent::__construct( array(
			'singular' => 'user',
			'plural'   => 'users',
			'screen'   => isset( $args[ 'screen' ] ) ? $args[ 'screen' ] : NULL,
		) );
		
		$this->is_site_users = 'site-users-network' === $this->screen->id;
		
		if( $this->is_site_users ) {
			$this->site_id = isset( $_REQUEST[ 'id' ] ) ? intval( $_REQUEST[ 'id' ] ) : 0;
		}
	}
	
	public function prepare_items() {
//		$users_query = new WP_User_Query( array(
//			'meta_key'   => '_requires_activation',
//			'meta_value' => 1
//		) );
//
//		$this->items = $users_query->get_results();
		
		global $role, $usersearch;
		
		$usersearch = isset( $_REQUEST[ 's' ] ) ? wp_unslash( trim( $_REQUEST[ 's' ] ) ) : '';
		
		$role = isset( $_REQUEST[ 'role' ] ) ? $_REQUEST[ 'role' ] : '';
		
		$per_page = ( $this->is_site_users ) ? 'site_users_network_per_page' : 'users_per_page';
		$users_per_page = $this->get_items_per_page( $per_page );
		//$users_per_page = 1;
		
		$paged = $this->get_pagenum();
		
		
		$args = array(
			'number'     => $users_per_page,
			'offset'     => ( $paged - 1 ) * $users_per_page,
			'role'       => $role,
			'search'     => $usersearch,
			'fields'     => 'all_with_meta',
			'meta_key'   => '_requires_activation',
			'meta_value' => 1
		);
		
		
		if( '' !== $args[ 'search' ] ) {
			$args[ 'search' ] = '*' . $args[ 'search' ] . '*';
		}
		
		if( $this->is_site_users ) {
			$args[ 'blog_id' ] = $this->site_id;
		}
		
		if( isset( $_REQUEST[ 'orderby' ] ) ) {
			$args[ 'orderby' ] = $_REQUEST[ 'orderby' ];
		}
		
		if( isset( $_REQUEST[ 'order' ] ) ) {
			$args[ 'order' ] = $_REQUEST[ 'order' ];
		}
		
		/**
		 * Filters the query arguments used to retrieve users for the current users list table.
		 *
		 * @since 4.4.0
		 *
		 * @param array $args Arguments passed to WP_User_Query to retrieve items for the current
		 *                    users list table.
		 */
		$args = apply_filters( 'users_list_table_query_args', $args );
		
		// Query the user IDs for this page
		$wp_user_search = new WP_User_Query( $args );
		
		$this->items = $wp_user_search->get_results();
		
		$this->set_pagination_args( array(
			'total_items' => $wp_user_search->get_total(),
			'per_page'    => $users_per_page,
		) );
		
		
	}
	
	public function has_items() {
		
		return parent::has_items(); // TODO: Change the autogenerated stub
		
	}
	
	public function no_items() {
		_e( 'No users found.' );
	}
	
	/**
	 * Retrieve an associative array of bulk actions available on this table.
	 *
	 * @since  3.1.0
	 *
	 * @return array Array of bulk actions.
	 */
	/*	protected function get_bulk_actions() {
			$actions = array();
			
			if ( is_multisite() ) {
				if ( current_user_can( 'remove_users' ) ) {
					$actions[ 'remove' ] = __( 'Remove' );
				}
			} else {
				if ( current_user_can( 'delete_users' ) ) {
					$actions[ 'delete' ] = __( 'Delete' );
				}
			}
			
			return $actions;
		}*/
	
	public function get_columns() {
		
		$columns = array(
			'cb'          => '<input type="checkbox" />',
			//'id'       => __( 'ID' ),
			'username'    => __( 'Username' ),
			'name'        => __( 'Name' ),
			'email'       => __( 'Email' ),
			'wp_role'     => __( 'WP Role' ),
			'chumly_role' => __( 'Chumly Role' ),
			'date'        => __( 'Registered' ),
			'action'      => __( 'Action' )
		);
		
		if( $this->is_site_users ) {
			unset( $columns[ 'posts' ] );
		}
		
		return $columns;
		
	}
	
	/**
	 * Get a list of sortable columns for the list table.
	 *
	 * @since 3.1.0
	 *
	 * @return array Array of sortable columns.
	 */
	protected function get_sortable_columns() {
		$columns = array(
			//'id'       => 'ID',
			'username' => 'login',
			'email'    => 'email',
			'date'     => 'registered'
		);
		
		return $columns;
	}
	
	/**
	 * Generate the list table rows.
	 *
	 * @since 3.1.0
	 */
	public function display_rows() {
		// Query the post counts for this page
		if( !$this->is_site_users ) {
			$post_counts = count_many_users_posts( array_keys( $this->items ) );
		}
		
		foreach( $this->items as $userid => $user_object ) {
			echo "\n\t" . $this->single_row( $user_object, '', '', isset( $post_counts ) ? $post_counts[ $userid ] : 0 );
		}
	}
	
	/**
	 * Generate HTML for a single row on the users.php admin panel.
	 *
	 * @since 3.1.0
	 * @since 4.2.0 The `$style` parameter was deprecated.
	 * @since 4.4.0 The `$role` parameter was deprecated.
	 *
	 * @param WP_User $user_object The current user object.
	 * @param string  $style       Deprecated. Not used.
	 * @param string  $role        Deprecated. Not used.
	 * @param int     $numposts    Optional. Post count to display for this user. Defaults
	 *                             to zero, as in, a new user has made zero posts.
	 *
	 * @return string Output for a single row.
	 */
	public function single_row( $user_object, $style = '', $role = '', $numposts = 0 ) {
		
		if( !( $user_object instanceof WP_User ) ) {
			$user_object = get_userdata( (int)$user_object );
		}
		
		$user_object->filter = 'display';
		$email = $user_object->user_email;
		
		$user_roles = $this->get_role_list( $user_object );
		
		// Set up the hover actions for this user
		$actions = array();
		$checkbox = '';
		$super_admin = '';
		
		// Check if the user for this row is editable
		if( current_user_can( 'list_users' ) ) {
			// Set up the user editing link
			$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER[ 'REQUEST_URI' ] ) ), get_edit_user_link( $user_object->ID ) ) );
			
			if( current_user_can( 'edit_user', $user_object->ID ) ) {
				$edit = "<strong><a href=\"{$edit_link}\">{$user_object->user_login}</a>{$super_admin}</strong><br />";
				$actions[ 'edit' ] = '<a href="' . $edit_link . '">' . __( 'Edit' ) . '</a>';
			}
			
			//$actions[ 'delete' ] = "<a class='submitdelete' href='" . wp_nonce_url( "admin.php?page=chumly-user-approval&amp;action=delete&amp;user=$user_object->ID", 'bulk-users' ) . "'>" . __( 'Delete' ) . "</a>";
			
			$actions[ 'view' ] = '<a href="#view" class="openDrawer">View</a>';
			
			/**
			 * Filters the action links displayed under each user in the Users list table.
			 *
			 * @since 2.8.0
			 *
			 * @param array   $actions     An array of action links to be displayed.
			 *                             Default 'Edit', 'Delete' for single site, and
			 *                             'Edit', 'Remove' for Multisite.
			 * @param WP_User $user_object WP_User object for the currently-listed user.
			 */
			$actions = apply_filters( 'chumly_user_row_actions', $actions, $user_object );
			
			// Role classes.
			$role_classes = esc_attr( implode( ' ', array_keys( $user_roles ) ) );
			
			// Set up the checkbox ( because the user is editable, otherwise it's empty )
			$checkbox = '<label class="screen-reader-text" for="user_' . $user_object->ID . '">' . sprintf( __( 'Select %s' ), $user_object->user_login ) . '</label>'
				. "<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='{$role_classes}' value='{$user_object->ID}' />";
			
		} else {
			
			$edit = "<strong>{$user_object->user_login}{$super_admin}</strong>";
			
		}
		
		$avatar = '<img src="' . chumly_avatar( $user_object->ID, 'profile', '', FALSE ) . '" style="height: 32px; width: 32px;" />';
		
		// Comma-separated list of user roles.
		$roles_list = implode( ', ', $user_roles );
		
		$r = "<tr id='user-$user_object->ID'>";
		
		list( $columns, $hidden, $sortable, $primary ) = $this->get_column_info();
		
		foreach( $columns as $column_name => $column_display_name ) {
			$classes = "$column_name column-$column_name";
			if( $primary === $column_name ) {
				$classes .= ' has-row-actions column-primary';
			}
			if( 'posts' === $column_name ) {
				$classes .= ' num'; // Special case for that column
			}
			
			if( in_array( $column_name, $hidden ) ) {
				$classes .= ' hidden';
			}
			
			$data = 'data-colname="' . wp_strip_all_tags( $column_display_name ) . '"';
			
			$attributes = "class='$classes' $data";
			
			if( 'cb' === $column_name ) {
				$r .= "<th scope='row' class='check-column'>$checkbox</th>";
			} else {
				$r .= "<td $attributes>";
				switch( $column_name ) {
					case 'id':
						$r .= $user_object->ID;
						break;
					case 'username':
						$r .= "$avatar $edit";
						break;
					case 'name':
						$r .= '<p class="openDrawer">';
						if( $user_object->first_name && $user_object->last_name ) {
							$r .= "$user_object->first_name $user_object->last_name";
						} elseif( $user_object->first_name ) {
							$r .= $user_object->first_name;
						} elseif( $user_object->last_name ) {
							$r .= $user_object->last_name;
						} else {
							$r .= '<span aria-hidden="true">&#8212;</span><span class="screen-reader-text">' . _x( 'Unknown', 'name' ) . '</span>';
						}
						$r .= '</p>';
						break;
					case 'email':
						$r .= "<a href='" . esc_url( "mailto:$email" ) . "'>$email</a>";
						break;
					case 'wp_role':
						$r .= esc_html( $roles_list );
						break;
					case 'chumly_role':
						$r .= ucwords( chumly_get_role( $user_object->ID ) );
						break;
					case 'date':
						$r .= $user_object->data->user_registered;
						break;
					case 'action':
						$r .= '<button type="submit" name="user_approved" class="button" value="' . $user_object->ID . '_1">Approve</button>';
						$r .= '<button type="submit" name="user_approved" class="button" value="' . $user_object->ID . '_0">Deny</button>';
						$r .= '<button type="submit" name="user_approved" class="button" value="' . $user_object->ID . '_2">Block</button>';
						
						break;
					default:
						/**
						 * Filters the display output of custom columns in the Users list table.
						 *
						 * @since 2.8.0
						 *
						 * @param string $output      Custom column output. Default empty.
						 * @param string $column_name Column name.
						 * @param int    $user_id     ID of the currently-listed user.
						 */
						$r .= apply_filters( 'manage_users_custom_column', '', $column_name, $user_object->ID );
				}
				
				if( $primary === $column_name ) {
					$r .= $this->row_actions( $actions );
				}
				$r .= "</td>";
			}
		}
		$r .= '</tr>';
		
		$profile_data = chumly_get_profile( array( 'user_id' => $user_object->ID ) );
		
		$r .= '<tr class="data-row"><td colspan="6"><div class="grid">';
		
		foreach( $profile_data as $item ) {
			
			if( $item->label ) {
				
				if( !$item->value ) {
					
					$r .= '<div class="grid-1-2">';
					$r .= '<strong>' . $item->label . '</strong>' . ' <i>No Value</i>';
					$r .= '</div>';
					
				} elseif( is_array( $item->value ) ) {
					
					$r .= '<div class="grid-1-2">';
					$r .= '<strong>' . $item->label . '</strong>' . ' ' . implode( ', ', $item->value );
					$r .= '</div>';
					
				} elseif( is_string( $item->value ) ) {
					
					$r .= '<div class="grid-1-2">';
					$r .= '<strong>' . $item->label . '</strong>' . ' ' . $item->value;
					$r .= '</div>';
					
				} else {
					
					$r .= '<div class="grid-1-2">';
					$r .= '<strong>' . $item->label . '</strong>' . ' <i>No Value</i>';
					$r .= '</div>';
					
				}
				
			}
			
		}
		
		$r .= '<div class="button-center"><button type="button" class="button closeDrawer">Close</button></div></div></td></tr>';
		
		return $r;
	}
	
	/**
	 * Gets the name of the default primary column.
	 *
	 * @since 4.3.0
	 *
	 * @return string Name of the default primary column, in this case, 'username'.
	 */
	protected function get_default_primary_column_name() {
		return 'username';
	}
	
	/**
	 * Returns an array of user roles for a given user object.
	 *
	 * @since 4.4.0
	 *
	 * @param WP_User $user_object The WP_User object.
	 *
	 * @return array An array of user roles.
	 */
	protected function get_role_list( $user_object ) {
		$wp_roles = wp_roles();
		
		$role_list = array();
		
		foreach( $user_object->roles as $role ) {
			if( isset( $wp_roles->role_names[ $role ] ) ) {
				$role_list[ $role ] = translate_user_role( $wp_roles->role_names[ $role ] );
			}
		}
		
		if( empty( $role_list ) ) {
			$role_list[ 'none' ] = _x( 'None', 'no user roles' );
		}
		
		/**
		 * Filters the returned array of roles for a user.
		 *
		 * @since 4.4.0
		 *
		 * @param array   $role_list   An array of user roles.
		 * @param WP_User $user_object A WP_User object.
		 */
		return apply_filters( 'get_role_list', $role_list, $user_object );
	}
	
}